from typing import Optional, TypedDict

class _CaveatDict(TypedDict):
    cid: str | None
    vid: str | None
    cl: str | None

class Caveat(object):
    def __init__(
        self,
        caveat_id: Optional[str | bytes] = None,
        verification_key_id: Optional[bytes] = None,
        location: Optional[str | bytes] = None,
        version: int = 1,
    ) -> None: ...
    @property
    def caveat_id(self) -> str | bytes | None: ...
    @property
    def caveat_id_bytes(self) -> bytes | None: ...
    @property
    def verification_key_id(self) -> bytes | None: ...
    @property
    def location(self) -> str | None: ...
    @caveat_id.setter
    def caveat_id(self, value: str | bytes): ...
    @verification_key_id.setter
    def verification_key_id(self, value: str | bytes): ...
    @location.setter
    def location(self, value: str | bytes): ...
    def first_party(self) -> bool: ...
    def third_party(self) -> bool: ...
    def to_dict(self) -> _CaveatDict: ...
